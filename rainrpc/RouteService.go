// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rainrpc

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"context"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ClassURI
//  - ClassName
//  - Body
type RainRequestParam struct {
	ClassURI  string `thrift:"classURI,1" db:"classURI" json:"classURI"`
	ClassName string `thrift:"className,2" db:"className" json:"className"`
	// unused field # 3
	Body string `thrift:"body,4" db:"body" json:"body"`
}

func NewRainRequestParam() *RainRequestParam {
	return &RainRequestParam{}
}

func (p *RainRequestParam) GetClassURI() string {
	return p.ClassURI
}

func (p *RainRequestParam) GetClassName() string {
	return p.ClassName
}

func (p *RainRequestParam) GetBody() string {
	return p.Body
}
func (p *RainRequestParam) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break;
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RainRequestParam) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClassURI = v
	}
	return nil
}

func (p *RainRequestParam) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *RainRequestParam) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *RainRequestParam) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RainRequestParam"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RainRequestParam) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("classURI", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:classURI: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassURI)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.classURI (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:classURI: ", p), err)
	}
	return err
}

func (p *RainRequestParam) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:className: ", p), err)
	}
	return err
}

func (p *RainRequestParam) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:body: ", p), err)
	}
	if err := oprot.WriteString(string(p.Body)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:body: ", p), err)
	}
	return err
}

func (p *RainRequestParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RainRequestParam(%+v)", *p)
}

// Attributes:
//  - ClassURI
//  - ClassName
//  - MethodName
//  - Body
//  - ParamList
type RainRequest struct {
	ClassURI   string              `thrift:"classURI,1" db:"classURI" json:"classURI"`
	ClassName  string              `thrift:"className,2" db:"className" json:"className"`
	MethodName string              `thrift:"methodName,3" db:"methodName" json:"methodName"`
	Body       string              `thrift:"body,4" db:"body" json:"body"`
	ParamList  []*RainRequestParam `thrift:"paramList,5" db:"paramList" json:"paramList"`
}

func NewRainRequest() *RainRequest {
	return &RainRequest{}
}

func (p *RainRequest) GetClassURI() string {
	return p.ClassURI
}

func (p *RainRequest) GetClassName() string {
	return p.ClassName
}

func (p *RainRequest) GetMethodName() string {
	return p.MethodName
}

func (p *RainRequest) GetBody() string {
	return p.Body
}

func (p *RainRequest) GetParamList() []*RainRequestParam {
	return p.ParamList
}
func (p *RainRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break;
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RainRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClassURI = v
	}
	return nil
}

func (p *RainRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *RainRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MethodName = v
	}
	return nil
}

func (p *RainRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *RainRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RainRequestParam, 0, size)
	p.ParamList = tSlice
	for i := 0; i < size; i ++ {
		_elem0 := &RainRequestParam{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.ParamList = append(p.ParamList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RainRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RainRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RainRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("classURI", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:classURI: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassURI)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.classURI (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:classURI: ", p), err)
	}
	return err
}

func (p *RainRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:className: ", p), err)
	}
	return err
}

func (p *RainRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("methodName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:methodName: ", p), err)
	}
	if err := oprot.WriteString(string(p.MethodName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.methodName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:methodName: ", p), err)
	}
	return err
}

func (p *RainRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:body: ", p), err)
	}
	if err := oprot.WriteString(string(p.Body)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:body: ", p), err)
	}
	return err
}

func (p *RainRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("paramList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:paramList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ParamList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ParamList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:paramList: ", p), err)
	}
	return err
}

func (p *RainRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RainRequest(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type RainResponseHead struct {
	Code    int64  `thrift:"code,1" db:"code" json:"code"`
	Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewRainResponseHead() *RainResponseHead {
	return &RainResponseHead{}
}

func (p *RainResponseHead) GetCode() int64 {
	return p.Code
}

func (p *RainResponseHead) GetMessage() string {
	return p.Message
}
func (p *RainResponseHead) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break;
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RainResponseHead) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Code = v
	}
	return nil
}

func (p *RainResponseHead) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *RainResponseHead) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RainResponseHead"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RainResponseHead) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Code)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err)
	}
	return err
}

func (p *RainResponseHead) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *RainResponseHead) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RainResponseHead(%+v)", *p)
}

// Attributes:
//  - ClassURI
//  - ClassName
//  - Body
type RainResponseBody struct {
	ClassURI  string `thrift:"classURI,1" db:"classURI" json:"classURI"`
	ClassName string `thrift:"className,2" db:"className" json:"className"`
	Body      string `thrift:"body,3" db:"body" json:"body"`
}

func NewRainResponseBody() *RainResponseBody {
	return &RainResponseBody{}
}

func (p *RainResponseBody) GetClassURI() string {
	return p.ClassURI
}

func (p *RainResponseBody) GetClassName() string {
	return p.ClassName
}

func (p *RainResponseBody) GetBody() string {
	return p.Body
}
func (p *RainResponseBody) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break;
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RainResponseBody) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClassURI = v
	}
	return nil
}

func (p *RainResponseBody) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *RainResponseBody) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *RainResponseBody) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RainResponseBody"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RainResponseBody) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("classURI", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:classURI: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassURI)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.classURI (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:classURI: ", p), err)
	}
	return err
}

func (p *RainResponseBody) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:className: ", p), err)
	}
	return err
}

func (p *RainResponseBody) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("body", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:body: ", p), err)
	}
	if err := oprot.WriteString(string(p.Body)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.body (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:body: ", p), err)
	}
	return err
}

func (p *RainResponseBody) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RainResponseBody(%+v)", *p)
}

// Attributes:
//  - ResponseHead
//  - ResponseBody
type RainResponse struct {
	ResponseHead *RainResponseHead `thrift:"responseHead,1" db:"responseHead" json:"responseHead"`
	ResponseBody *RainResponseBody `thrift:"responseBody,2" db:"responseBody" json:"responseBody"`
}

func NewRainResponse() *RainResponse {
	return &RainResponse{}
}

var RainResponse_ResponseHead_DEFAULT *RainResponseHead

func (p *RainResponse) GetResponseHead() *RainResponseHead {
	if !p.IsSetResponseHead() {
		return RainResponse_ResponseHead_DEFAULT
	}
	return p.ResponseHead
}

var RainResponse_ResponseBody_DEFAULT *RainResponseBody

func (p *RainResponse) GetResponseBody() *RainResponseBody {
	if !p.IsSetResponseBody() {
		return RainResponse_ResponseBody_DEFAULT
	}
	return p.ResponseBody
}
func (p *RainResponse) IsSetResponseHead() bool {
	return p.ResponseHead != nil
}

func (p *RainResponse) IsSetResponseBody() bool {
	return p.ResponseBody != nil
}

func (p *RainResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break;
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RainResponse) ReadField1(iprot thrift.TProtocol) error {
	p.ResponseHead = &RainResponseHead{}
	if err := p.ResponseHead.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResponseHead), err)
	}
	return nil
}

func (p *RainResponse) ReadField2(iprot thrift.TProtocol) error {
	p.ResponseBody = &RainResponseBody{}
	if err := p.ResponseBody.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResponseBody), err)
	}
	return nil
}

func (p *RainResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RainResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RainResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("responseHead", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responseHead: ", p), err)
	}
	if err := p.ResponseHead.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResponseHead), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responseHead: ", p), err)
	}
	return err
}

func (p *RainResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("responseBody", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:responseBody: ", p), err)
	}
	if err := p.ResponseBody.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResponseBody), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:responseBody: ", p), err)
	}
	return err
}

func (p *RainResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RainResponse(%+v)", *p)
}

type RouteService interface {
	// Parameters:
	//  - RainRequest
	Execute(rainRequest *RainRequest) (r *RainResponse, err error)
}

type RouteServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewRouteServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RouteServiceClient {
	return &RouteServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol: f.GetProtocol(t),
		OutputProtocol: f.GetProtocol(t),
		SeqId: 0,
	}
}

func NewRouteServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RouteServiceClient {
	return &RouteServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol: iprot,
		OutputProtocol: oprot,
		SeqId: 0,
	}
}

// Parameters:
//  - RainRequest
func (p *RouteServiceClient) Execute(rainRequest *RainRequest) (r *RainResponse, err error) {
	if err = p.sendExecute(rainRequest); err != nil {
		return
	}
	return p.recvExecute()
}

func (p *RouteServiceClient) sendExecute(rainRequest *RainRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("execute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RouteServiceExecuteArgs{
		RainRequest: rainRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RouteServiceClient) recvExecute() (value *RainResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "execute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "execute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "execute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "execute failed: invalid message type")
		return
	}
	result := RouteServiceExecuteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type RouteServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RouteService
}

func (p *RouteServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RouteServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RouteServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRouteServiceProcessor(handler RouteService) *RouteServiceProcessor {

	self3 := &RouteServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["execute"] = &routeServiceProcessorExecute{handler: handler}
	return self3
}

func (p *RouteServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(context.Background(),seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type routeServiceProcessorExecute struct {
	handler RouteService
}
func (p *routeServiceProcessorExecute) Process(ctx context.Context,seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RouteServiceExecuteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RouteServiceExecuteResult{}
	var retval *RainResponse
	var err2 error
	if retval, err2 = p.handler.Execute(args.RainRequest); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing execute: "+err2.Error())
		oprot.WriteMessageBegin("execute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("execute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RainRequest
type RouteServiceExecuteArgs struct {
	RainRequest *RainRequest `thrift:"rainRequest,1" db:"rainRequest" json:"rainRequest"`
}

func NewRouteServiceExecuteArgs() *RouteServiceExecuteArgs {
	return &RouteServiceExecuteArgs{}
}

var RouteServiceExecuteArgs_RainRequest_DEFAULT *RainRequest

func (p *RouteServiceExecuteArgs) GetRainRequest() *RainRequest {
	if !p.IsSetRainRequest() {
		return RouteServiceExecuteArgs_RainRequest_DEFAULT
	}
	return p.RainRequest
}
func (p *RouteServiceExecuteArgs) IsSetRainRequest() bool {
	return p.RainRequest != nil
}

func (p *RouteServiceExecuteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break;
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RouteServiceExecuteArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RainRequest = &RainRequest{}
	if err := p.RainRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RainRequest), err)
	}
	return nil
}

func (p *RouteServiceExecuteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RouteServiceExecuteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rainRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rainRequest: ", p), err)
	}
	if err := p.RainRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RainRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rainRequest: ", p), err)
	}
	return err
}

func (p *RouteServiceExecuteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RouteServiceExecuteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RouteServiceExecuteResult struct {
	Success *RainResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRouteServiceExecuteResult() *RouteServiceExecuteResult {
	return &RouteServiceExecuteResult{}
}

var RouteServiceExecuteResult_Success_DEFAULT *RainResponse

func (p *RouteServiceExecuteResult) GetSuccess() *RainResponse {
	if !p.IsSetSuccess() {
		return RouteServiceExecuteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RouteServiceExecuteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RouteServiceExecuteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break;
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RouteServiceExecuteResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RainResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RouteServiceExecuteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("execute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RouteServiceExecuteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RouteServiceExecuteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RouteServiceExecuteResult(%+v)", *p)
}
